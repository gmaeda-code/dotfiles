# To start the docker daemon:
docker -d

# To build a docker image:
docker build -t <image-tag-name> <path-of-Dockerfile>

# To start a container with an interactive shell:
docker run -ti <image-name> /bin/bash

# To "shell" into a running container (docker-1.3+):
docker exec -ti <container-name> bash

# To inspect a running container:
docker inspect <container-name> (or <container-id>)

# To get the process ID for a container:
docker inspect --format {{.State.Pid}} <container-name-or-id>

# To list (and pretty-print) the current mounted volumes for a container:
docker inspect --format='{{json .Volumes}}' <container-id> | python -mjson.tool

# To copy files/folders between a container and your host:
docker cp foo.txt mycontainer:/foo.txt

# To list currently running containers:
docker ps

# To list all containers:
docker ps -a

# To remove all stopped containers:
docker rm $(docker ps -qa)

# To list all images:
docker images

# To remove all untagged images:
docker rmi $(docker images | grep "^<none>" | awk '{print $3}')

# To remove all volumes not used by at least one container:
docker volume prune

# To save image as tar archive:
docker save -o <archive-name>.tar <image-name>

# To restore image from a saved tar archive:
docker load -i <archive-name>.tar

# To remove an image image:
docker image rm <image-name-or-id>

# To tag an image:
docker image tag <image-name>:<tag-name> <image-name>:<new-tag-name>

# To login into hub.docker.com:
docker login

# To push a docker image into dockerhub repository:
docker push <image-name>:<image-tag-name>

##############################################
# User added
# ############################################
# Docker


コンテナ内のシェル
docker exec -i -t <container_name> /bin/bash (or /bin/sh)


- sudo docker stop portainer
- sudo docker rm portainer
- docker-compose pull
	- docker pull adguard/adguardhome:latest
- docker imagesのタグがlatest出ない場合､updateできる?
	そういうわけではないようだ｡複数あるときはそうなのかも


# volumes等の指定
volumes:
  <volumes-name>:
external:trueがなくても､流用してくれるimageもある
# 既存のnetworkの設定
networks:
  default:
    name: adguardhome_default 
    external: true
or?
networks:
  adguardhome_default: 
    external: true

# 既存のボリュームの設定
volumes:
  portainer_data:
    external: true
or?
volumes:
  transmission-config:
    external: true
    name: transmission-config
コンテナ内にpath で指定
volumes:
  - /var/lib/docker/volumes/adguard-confdir/_data:/opt/adguardhome/conf
  - /var/lib/docker/volumes/adguard-workdir/_data:/opt/adguardhome/work
基本的に､volumeが予め作成されていない場合は､container名が<container>_<volume>という形で追加される

# volumeの指定方法
volumeで指定する方法､(結局は/var/lib/docker/volumes/の中)
	dockerでvolumeとして管理できる
bind:volume内をpathで指定する方法
bind:ユーザー領域にpathで指定する方法
指定方法が違っても､同じ場所を指定していれば､データは同じ｡

# backup plan
workstationと同じく､基本的には､home directory
あとは､volumeの場所
指定方法自体は､networksと同じようなところがある｡

