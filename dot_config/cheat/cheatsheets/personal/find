#find


#変更されたファイルを見つける
timeはday､minは分数
changeとmodifyの違いは?
#60分以内に変更されたファイル一覧
    - find ./ -cmin -60
#3日より前に変更
find . -mtime +3
#3日以内に変更
find . -mtime -3

#ある文字を含むファイルのみ表示する
    find . -type f -print | xargs grep "some string"
    find . -type f -print0 | xargs -0 grep "some string"
    find . -type f -print0 | xargs -0 grep -l "some string"
    find / -type f -exec grep 'some string' {} \; -exec echo {} \;
#command not foundのときとか
    $ find / -name cal -print

#1ヶ月より前のファイルを削除
    find . -type f -mtime +31 -exec rm {} \;
    単位を含めるとエラーになるので､mtime or mmin
    yunohost
        find . -type f -mtime +20 -exec rm {} \;

#見つかったものだけ表示したいとき
    find / -name qownnotes 2> /dev/null
    2は標準出力


# --------------------------------------------------------
delete files greater than some size
find . -type f  -size -200c -delete
    cはbyte､duとls -lでは少し違うみたい｡lsの方が正確だった
    deleteなしでドライラン

############################################################
#検索
## --------------------------------------------------------
# 指定の文字を含むファイルを見つける
find . -name "*" | xargs grep 検索文字
    例えば、現在のディレクトリ以下にあるPHPファイルを対象に、「Auth」が記述されたファイルと行を出力するには以下のようになります。
    find . -name "*.php" | xargs grep Auth
    findでマッチした.phpファイル一式をxargsコマンドが受け取り、それをgrepの引数に渡し、Auth という文字列を検索しています。

#「○○」という文字列を含むファイルをリスト化したい時は、以下のコマンドで。
# 指定フォルダ直下のみ
ls [検索対象フォルダのパス] | grep "[検索したい文字列]" 
#指定フォルダ配下を再帰検索
find [検索対象フォルダのパス] -type f -name "*[検索したい文字列]*" 
#指定フォルダ配下を再帰検索
grep [検索したい文字列] -rl [検索対象フォルダのパス] 
#指定フォルダ配下を再帰検索
find [検索対象フォルダのパス] -type f -print | xargs grep '[検索したい文字列]' 


######################################
#default
########################################
# To find files following symlinks (otherwise the symlinks are not followed):
find -L . -type f

# To find files by case-insensitive extension (ex: .jpg, .JPG, .jpG):
find . -iname "*.jpg"

# To find directories:
find . -type d

# To find files:
find . -type f

# To find files by octal permission:
find . -type f -perm 777

# To find files with setuid bit set:
find . -xdev \( -perm -4000 \) -type f -print0 | xargs -0 ls -l

# To find files newer than 1 day old and copy elsewhere (remove -p flag in xargs to not be asked):
find . -type f -ctime -1 -print0 | xargs -0 -p cp -t <dir>
# or:
find . -type f -ctime -1 -print0 | xargs -0 -p -J % cp % <dir>

# To find files with extension '.txt' and remove them:
find ./path/ -name '*.txt' -delete

# To find files with tilde as postfix and remove them:
find ./path/ -name '*~' -delete

# To find files with extension '.txt' and dump their contents:
find ./path/ -name '*.txt' -exec cat '{}' \;

# To find files with extension '.txt' and look for a string into them:
find ./path/ -name '*.txt' | xargs grep 'string'

# To find files with size bigger than 5 Mebibyte and sort them by size:
find . -size +5M -type f -print0 | xargs -0 ls -Ssh | sort -z

# To find files bigger than 2 Megabyte and list them:
find . -type f -size +200000000c -exec ls -lh {} \; | awk '{ print $9 ": " $5 }'

# To find files modified more than 7 days ago and list file information:
find . -type f -mtime +7d -ls

# To find symlinks owned by a user and list file information:
find . -type l -user <username-or-userid> -ls

# To search for and delete empty directories:
find . -type d -empty -exec rmdir {} \;

# To search for directories named build at a max depth of 2 directories:
find . -maxdepth 2 -name build -type d

# To search all files who are not in .git directory:
find . ! -iwholename '*.git*' -type f

# To find all files that have the same node (hard link) as MY_FILE_HERE:
find . -type f -samefile MY_FILE_HERE 2>/dev/null

# To find all files in the current directory and modify their permissions:
find . -type f -exec chmod 644 {} \;

# To find all files changed in last 2 days:
find . -type f -ctime -48h
find . -type f -ctime -2
# Or created in last 2 days:
find . -type f -Btime -2
# Or accessed in last 2 days:
find . -type f -atime -2

# To find and rename (imperfect) all files and dirs that have a comma in the
# name (dry-run):
find . -name '*,*' | while read f; do echo mv "$f" "${f//,/}"; done

# To find all broken links. Note -L returns a file unless it is a broken link:
find -L /usr/ports/packages -type l

# To find and run multiple shell commands (without multiple execs):
# See: https://stackoverflow.com/questions/5119946/find-exec-with-multiple-commands
find . -type f -exec sh -c "echo '{}'; cat '{}';" \;
